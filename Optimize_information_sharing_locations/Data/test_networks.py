class IO():
    def scen_four_node():
        Xi = [1,2]
        prob = {} # probability of each sceanrio
        link = [(2,4)]
        link_tff ={}
        link_c ={}
        link_b ={}
        link_alpha ={}
        link_cap ={}

        for xi in Xi:
            prob[xi] = 1/len(Xi)
        prob[1] = 0.5
        prob[2] = 0.5
        link_tff[2,4,1] = 1
        link_tff[2,4,2] = 1
        link_c[2,4,1] = 5 # 1, 2 link nodes, 1 scenario id
        link_c[2,4,2] = -50#-5 # 1, 2 link nodes, 1 scenario id
        link_b[2,4,1] = 0 # 1, 2 link nodes, 1 scenario id
        link_b[2,4,2] = 0
        link_alpha[2,4,1] = 4
        link_alpha[2,4,2] = 4
        link_cap[2,4,1] = 1
        link_cap[2,4,2] = 1
        return Scen(Xi, prob,link, link_tff, link_c, link_b, link_cap, link_alpha) 

    def four_node():
        R = [1]
        S = [3]
        N = list(range(1,5))
        A= [(1,2),(2,3),(2,4),(1,4),(4,3)]
                # travel cost function: use BPR function: t = tff(c+b(v/cap)**alpha)
        alpha = {}
        cap = {}
        tff = {}
        b = {}
        c = {}

        Q = {} # slope of demand function: demand = demand - demand_slope*rho
        for s in S:
            for r in R:
                Q[r,s]=3

        for (r,s) in A:
                tff[r,s] = 1
                alpha[r,s] = 4.0
                b[r,s] = 2 
                cap[r,s] = 1
                c[r,s] = 0

        return Network_transport(N, A, R, S, Q, alpha,  b, cap, tff, c)

    def Orlando():
        S = [3,11,17]
        #S = [3]   # destination
        R = [3,11,17]
        #R = set(range(1,19))
        #S = set(range(1,19))
        #R = [17]   # origin 
        #TODO can we change to list(range(4))
        N = set(range(1,19))
        A = [(1,2),(1,3),
                (2,1),(2,4),
                (3,1),(3,4),(3,5),
                (4,3),(4,2),(4,6),(4,7),
                (5,3),(5,11),(5,10),
                (6,4),(6,10),(6,7),(6,9),
                (7,4),(7,6),(7,8),
                (8,7),(8,9),(8,16),
                (9,6),(9,8),(9,14),(9,15),
                (10,5),(10,13),(10,14),(10,6),
                (11,5),(11,12),
                (12,11),(12,13),
                (13,12),(13,10),(13,14),
                (14,13),(14,10),(14,9),(14,15),(14,17),
                (15,9),(15,14),(15,16),(15,18),
                (16,8),(16,15),
                (17,14),(17,18),
                (18,15),(18,17)]
        # utility parameters for charging facility choice
        Q = {} # slope of demand function: demand = demand - demand_slope*rho
        value =60 

        def init_Q():
            for s in S:
                for r in R:
                    if r !=s:
                        Q[r,s]=0
                    else:
                        Q[r,s] = 0
            Q[17,11]=1455
            Q[11,17]=854
            Q[17,3]=9000
            Q[3,17]=8610
            Q[11,3]=5186
            Q[3,11]=4029
            for r in R:
                for s in S:
                    Q[r,s] = Q[r,s]/value # veh/hour -> veh/min
        init_Q()

        # travel cost function: use BPR function: t = tff(c+b(v/cap)**alpha)
        alpha = {}
        cap = {}
        tff = {}
        b = {}
        c = {}
        l_n = {}
        factor = 0.24

        for (r,s) in A:
                tff[r,s] = 1 #200
                alpha[r,s] = 4
                b[r,s] = 0.15
                cap[r,s] = 1 #1000
                c[r,s] = 1
                l_n[r,s] =  1

        def inti_lane():
            l_n[1,2] = 3
            l_n[2,1] = 3
            l_n[2,4] = 2
            l_n[4,2] = 2
            l_n[3,4] = 3
            l_n[4,3] = 3
            l_n[1,3] = 3
            l_n[3,1] = 3
            l_n[3,5] = 3
            l_n[5,3] = 3
            l_n[4,6] = 3
            l_n[6,4] = 3
            l_n[4,7] = 2
            l_n[7,4] = 2
            l_n[6,7] = 3
            l_n[7,6] = 3
            l_n[7,8] = 2
            l_n[8,7] = 2
            l_n[8,9] = 3
            l_n[9,8] = 3
            l_n[6,9] = 3
            l_n[9,6] = 3
            l_n[9,15] = 3
            l_n[15,9] = 3
            l_n[8,16] = 2
            l_n[16,8] = 3
            l_n[15,16] = 3
            l_n[16,15] = 3
            l_n[10,6] = 3
            l_n[6,10] = 3
            l_n[5,10] = 4
            l_n[10,5] = 4
            l_n[5,11] = 3
            l_n[11,5] = 3
            l_n[11,12] = 3
            l_n[12,11] = 3
            l_n[12,13] = 3
            l_n[13,12] = 3
            l_n[13,10] = 3
            l_n[10,13] = 3
            l_n[10,14] = 4
            l_n[14,10] = 4
            l_n[13,14] = 3
            l_n[14,13] = 3
            l_n[9,14] = 3
            l_n[14,9] = 3
            l_n[14,15] = 3
            l_n[15,14] = 3
            l_n[15,18] = 2
            l_n[18,15] = 2
            l_n[17,18] = 2
            l_n[18,17] = 2
            l_n[14,17] = 3
            l_n[17,14] = 3

        inti_lane()

        # capacity for the mixed traffic is not bounded by the real traffic calculated here.
        # this is because the CAV allows the capacity of the road to increase (smaller headway)

        def init_cap():
            cap[3,5] = 18400
            cap[5,3] = 18400
            cap[1,3] = 18400
            cap[3,1] = 18400
            cap[1,2] = 18400
            cap[2,1] = 18400
            cap[2,4] = 8800
            cap[4,2] = 8800
            cap[4,3] = 13200
            cap[3,4] = 13200
            cap[4,7] = 8800
            cap[7,4] = 8800
            cap[4,6] = 9200
            cap[6,4] = 9200
            cap[5,11] = 18400
            cap[11,5] = 18400
            cap[11,12] = 17600
            cap[12,11] = 17600
            cap[12,13] = 16800
            cap[13,12] = 16800
            cap[13,10] = 19200
            cap[10,13] = 19200
            cap[13,14] = 16800
            cap[14,13] = 16800
            cap[10,14] = 19200
            cap[14,10] = 19200
            cap[5,10] = 19200
            cap[10,5] = 19200
            cap[6,10] = 14400
            cap[10,6] = 14400
            cap[14,15] = 14400
            cap[15,14] = 14400
            cap[9,14] = 12000
            cap[14,9] = 12000
            cap[6,9] = 9600
            cap[9,6] = 9600
            cap[9,15] = 12000
            cap[15,9] = 12000
            cap[15,18] = 9600
            cap[18,15] = 9600
            cap[17,18] = 10000
            cap[18,17] = 10000
            cap[6,7] = 14400
            cap[7,6] = 14400
            cap[7,8] = 8800
            cap[8,7] = 8800
            cap[8,16] = 8800
            cap[16,8] = 8800
            cap[9,8] = 12000
            cap[8,9] = 12000
            cap[14,17] = 18000
            cap[17,14] = 18000
            cap[15,16] = 12000
            cap[16,15] = 12000

            for (r,s) in A:
                cap[r,s] = cap[r,s]*0.5*factor/value
                #cap[r,s] = cap[r,s]*0.5/value
        init_cap()

        def init_tff():
            tff[3,5] = 360
            tff[5,3] = 360
            tff[1,3] = 60
            tff[3,1] = 60
            tff[1,2] = 120
            tff[2,1] = 120
            tff[2,4] = 60
            tff[4,2] = 60
            tff[4,3] = 120
            tff[3,4] = 120
            tff[4,7] = 480
            tff[7,4] = 480
            tff[4,6] = 300
            tff[6,4] = 300
            tff[5,11] = 180
            tff[11,5] = 180
            tff[11,12] = 60
            tff[12,11] = 60
            tff[12,13] = 120
            tff[13,12] = 120
            tff[13,10] = 180
            tff[10,13] = 180
            tff[13,14] = 120
            tff[14,13] = 120
            tff[10,14] = 60
            tff[14,10] = 60
            tff[5,10] = 180
            tff[10,5] = 180
            tff[6,10] = 240
            tff[10,6] = 240
            tff[14,15] = 240
            tff[15,14] = 240
            tff[9,14] = 480
            tff[14,9] = 480
            tff[6,9] = 60
            tff[9,6] = 60
            tff[9,15] = 60
            tff[15,9] = 60
            tff[15,18] = 240
            tff[18,15] = 240
            tff[17,18] = 420
            tff[18,17] = 420
            tff[6,7] = 180
            tff[7,6] = 180
            tff[7,8] = 120
            tff[8,7] = 120
            tff[8,16] = 180
            tff[16,8] = 180
            tff[9,8] = 240
            tff[8,9] = 240
            tff[14,17] = 360
            tff[17,14] = 360
            tff[15,16] = 120
            tff[16,15] = 120


            for (r,s) in A:
                tff[r,s] = tff[r,s]/3600 # convert the time from seconds to hours 
                # Note, in the previous TR C paper, this is /60
        init_tff()

        return Network_transport(N, A, R, S, Q, alpha,  b, cap, tff, c)

    def scen_Orlando(ntw_t, n_scen):
        Xi = list(range(1,n_scen+1))
        print("z,", Xi)
        #Xi = [1,2]
        prob = {} # probability of each sceanrio
        # link = [(5,11),(11,5)]
        link = [(17,14),(14,17),(3,5),(5,3)]
        # link = [(14,10),(10,14),(5,10),(10,5),(4,6),(6,4)]
        #link = [(14,10),(10,14),(5,10),(10,5),(4,6),(6,4),(17,14),(5,3)]
        #link = [(14,10),(10,14),(5,10),(10,5),(4,6),(6,4),(6,9),(9,6)]

        # link = [(14,10),(10,14),(5,10),(10,5),(4,6),(6,4)] # it changes slightly over time
        #link = [(10,14),(5,10),(6,9),(8,9)]
        #link = [(17,14),(6,10),(6,9)]
        #link = [(17,14),(12,13),(6,10),(3,5)]
        #link = [(17,14),(14,17)]
        link_tff ={}
        link_c ={}
        link_b ={}
        link_alpha ={}
        link_cap ={}
        # 0.8191323809911911
        # 0.9693098489068409
        # 0.46963012014370287
        # 0.6966168645773051
        # 0.10446998266683472
        # 0.2609031657652603
        # 0.772992458611554
        # 0.13607905050642166
        # 0.43174742436467173
        # 0.5498013850335695
        # 0.5634559535818098
        # 0.8768971587472372
        # 0.3503996904909369
        # 0.19482274715945092
        # 0.6654975244042052

        random_value = {}
        #random_value = {1: 0.13607905050642166, 2: 0.5498013850335695}
        #random_value = {1: 0.549, 2: 0.261, 3:0.773, 4:0.469, 5:0.876}

        #random_value = {1: 1}


        random.seed(1)#
        for xi in Xi:
            prob[xi] = 1/len(Xi)
            random_value[xi] = random.uniform(0.5,1) 
            print(prob[xi])
            print(random_value[xi])
        # actual
        for xi in Xi:
            for (i,j) in link:
                link_tff[i,j,xi] = ntw_t.tff[i,j]
                link_c[i,j,xi] = ntw_t.c[i,j] # 1, 2 link nodes, 1 scenario id
                link_b[i,j,xi] = ntw_t.b[i,j]
                link_alpha[i,j,xi] = ntw_t.alpha[i,j]
                link_cap[i,j,xi] = ntw_t.cap[i,j]* random_value[xi]
                
                #link_cap[i,j,xi] = ntw_t.cap[i,j]*random.random() 
                print(link_cap[i,j,xi])
                # link_cap[i,j,1] = ntw_t.cap[i,j]*0.1
                # link_cap[i,j,2] = ntw_t.cap[i,j]*0.5
        return Scen(Xi, prob,link, link_tff, link_c, link_b, link_cap, link_alpha)

    def Sioux_Falls(n):
        N = set(range(1,25)) # nodes
        R = set(range(1,25)) # origins
        S = set(range(1,25)) # destinations
        num_nodes = n

        A = [(1,2),(1,3),
                (2,1),(2,6),
                (3,1),(3,4),(3,12),
                (4,3),(4,5),(4,11),
                (5,4),(5,6),(5,9),
                (6,2),(6,5),(6,8),
                (7,8),(7,18),
                (8,6),(8,7),(8,9),(8,16),
                (9,5),(9,8),(9,10),
                (10,9),(10,11),(10,15),(10,16),(10,17),
                (11,4),(11,10),(11,12),(11,14),
                (12,3),(12,11),(12,13),
                (13,12),(13,24),
                (14,11),(14,15),(14,23),
                (15,10),(15,14),(15,19),(15,22),
                (16,8),(16,10),(16,17),(16,18),
                (17,10),(17,16),(17,19),
                (18,7),(18,16),(18,20),
                (19,15),(19,17),(19,20),
                (20,18),(20,19),(20,21),(20,22),
                (21,20),(21,22),(21,24),
                (22,15),(22,20),(22,21),(22,23),
                (23,14),(23,22),(23,24),
                (24,13),(24,21),(24,23)]
        # utility parameters for charging facility choice

        Q = {} # slope of demand function: demand = demand - demand_slope*rho
        for r in R:
            for s in S:
                Q[r,s] = 0

        def init_od():
            Q[2,1]=100
            Q[3,1]=100
            Q[4,1]=500
            Q[5,1]=200
            Q[6,1]=300
            Q[7,1]=500
            Q[8,1]=800
            Q[9,1]=500
            Q[10,1]=1300
            Q[11,1]=500
            Q[12,1]=200
            Q[13,1]=500
            Q[14,1]=300
            Q[15,1]=500
            Q[16,1]=500
            Q[17,1]=400
            Q[18,1]=100
            Q[19,1]=300
            Q[20,1]=300
            Q[21,1]=100
            Q[22,1]=400
            Q[23,1]=300
            Q[24,1]=100
            Q[1,2]=100
            Q[3,2]=100
            Q[4,2]=200
            Q[5,2]=100
            Q[6,2]=400
            Q[7,2]=200
            Q[8,2]=400
            Q[9,2]=200
            Q[10,2]=600
            Q[11,2]=200
            Q[12,2]=100
            Q[13,2]=300
            Q[14,2]=100
            Q[15,2]=100
            Q[16,2]=400
            Q[17,2]=200
            Q[19,2]=100
            Q[20,2]=100
            Q[22,2]=100
            Q[1,3]=100
            Q[2,3]=100
            Q[4,3]=200
            Q[5,3]=100
            Q[6,3]=300
            Q[7,3]=100
            Q[8,3]=200
            Q[9,3]=100
            Q[10,3]=300
            Q[11,3]=300
            Q[12,3]=200
            Q[13,3]=100
            Q[14,3]=100
            Q[15,3]=100
            Q[16,3]=200
            Q[17,3]=100
            Q[22,3]=100
            Q[23,3]=100
            Q[1,4]=500
            Q[2,4]=200
            Q[3,4]=200
            Q[5,4]=500
            Q[6,4]=400
            Q[7,4]=400
            Q[8,4]=700
            Q[9,4]=700
            Q[10,4]=1200
            Q[11,4]=1400
            Q[12,4]=600
            Q[13,4]=600
            Q[14,4]=500
            Q[15,4]=500
            Q[16,4]=800
            Q[17,4]=500
            Q[18,4]=100
            Q[19,4]=200
            Q[20,4]=300
            Q[21,4]=200
            Q[22,4]=400
            Q[23,4]=500
            Q[24,4]=200
            Q[1,5]=200
            Q[2,5]=100
            Q[3,5]=100
            Q[4,5]=500
            Q[6,5]=200
            Q[7,5]=200
            Q[8,5]=500
            Q[9,5]=800
            Q[10,5]=1000
            Q[11,5]=500
            Q[12,5]=200
            Q[13,5]=200
            Q[14,5]=100
            Q[15,5]=200
            Q[16,5]=500
            Q[17,5]=200
            Q[19,5]=100
            Q[20,5]=100
            Q[21,5]=100
            Q[22,5]=200
            Q[23,5]=100
            Q[1,6]=300
            Q[2,6]=400
            Q[3,6]=300
            Q[4,6]=400
            Q[5,6]=200
            Q[7,6]=400
            Q[8,6]=800
            Q[9,6]=400
            Q[10,6]=800
            Q[11,6]=400
            Q[12,6]=200
            Q[13,6]=200
            Q[14,6]=100
            Q[15,6]=200
            Q[16,6]=900
            Q[17,6]=500
            Q[18,6]=100
            Q[19,6]=200
            Q[20,6]=300
            Q[21,6]=100
            Q[22,6]=200
            Q[23,6]=100
            Q[24,6]=100
            Q[1,7]=500
            Q[2,7]=200
            Q[3,7]=100
            Q[4,7]=400
            Q[5,7]=200
            Q[6,7]=400
            Q[8,7]=1000
            Q[9,7]=600
            Q[10,7]=1900
            Q[11,7]=500
            Q[12,7]=700
            Q[13,7]=400
            Q[14,7]=200
            Q[15,7]=500
            Q[16,7]=1400
            Q[17,7]=1000
            Q[18,7]=200
            Q[19,7]=400
            Q[20,7]=500
            Q[21,7]=200
            Q[22,7]=500
            Q[23,7]=200
            Q[24,7]=100
            Q[1,8]=800
            Q[2,8]=400
            Q[3,8]=200
            Q[4,8]=700
            Q[5,8]=500
            Q[6,8]=800
            Q[7,8]=1000
            Q[9,8]=800
            Q[10,8]=1600
            Q[11,8]=800
            Q[12,8]=600
            Q[13,8]=600
            Q[14,8]=400
            Q[15,8]=600
            Q[16,8]=2200
            Q[17,8]=1400
            Q[18,8]=300
            Q[19,8]=700
            Q[20,8]=900
            Q[21,8]=400
            Q[22,8]=500
            Q[23,8]=300
            Q[24,8]=200
            Q[1,9]=500
            Q[2,9]=200
            Q[3,9]=100
            Q[4,9]=700
            Q[5,9]=800
            Q[6,9]=400
            Q[7,9]=600
            Q[8,9]=800
            Q[10,9]=2800
            Q[11,9]=1400
            Q[12,9]=600
            Q[13,9]=600
            Q[14,9]=600
            Q[15,9]=900
            Q[16,9]=1400
            Q[17,9]=900
            Q[18,9]=200
            Q[19,9]=400
            Q[20,9]=600
            Q[21,9]=300
            Q[22,9]=700
            Q[23,9]=500
            Q[24,9]=200
            Q[1,10]=1300
            Q[2,10]=600
            Q[3,10]=300
            Q[4,10]=1200
            Q[5,10]=1000
            Q[6,10]=800
            Q[7,10]=1900
            Q[8,10]=1600
            Q[9,10]=2800
            Q[11,10]=4000
            Q[12,10]=2000
            Q[13,10]=1900
            Q[14,10]=2100
            Q[15,10]=4000
            Q[16,10]=4400
            Q[17,10]=3900
            Q[18,10]=700
            Q[19,10]=1800
            Q[20,10]=2500
            Q[21,10]=1200
            Q[22,10]=2600
            Q[23,10]=1800
            Q[24,10]=800
            Q[1,11]=500
            Q[2,11]=200
            Q[3,11]=300
            Q[4,11]=1500
            Q[5,11]=500
            Q[6,11]=400
            Q[7,11]=500
            Q[8,11]=800
            Q[9,11]=1400
            Q[10,11]=3900
            Q[12,11]=1400
            Q[13,11]=1000
            Q[14,11]=1600
            Q[15,11]=1400
            Q[16,11]=1400
            Q[17,11]=1000
            Q[18,11]=100
            Q[19,11]=400
            Q[20,11]=600
            Q[21,11]=400
            Q[22,11]=1100
            Q[23,11]=1300
            Q[24,11]=600
            Q[1,12]=200
            Q[2,12]=100
            Q[3,12]=200
            Q[4,12]=600
            Q[5,12]=200
            Q[6,12]=200
            Q[7,12]=700
            Q[8,12]=600
            Q[9,12]=600
            Q[10,12]=2000
            Q[11,12]=1400
            Q[13,12]=1300
            Q[14,12]=700
            Q[15,12]=700
            Q[16,12]=700
            Q[17,12]=600
            Q[18,12]=200
            Q[19,12]=300
            Q[20,12]=400
            Q[21,12]=300
            Q[22,12]=700
            Q[23,12]=700
            Q[24,12]=500
            Q[1,13]=500
            Q[2,13]=300
            Q[3,13]=100
            Q[4,13]=600
            Q[5,13]=200
            Q[6,13]=200
            Q[7,13]=400
            Q[8,13]=600
            Q[9,13]=600
            Q[10,13]=1900
            Q[11,13]=1000
            Q[12,13]=1300
            Q[14,13]=600
            Q[15,13]=700
            Q[16,13]=600
            Q[17,13]=500
            Q[18,13]=100
            Q[19,13]=300
            Q[20,13]=600
            Q[21,13]=600
            Q[22,13]=1300
            Q[23,13]=800
            Q[24,13]=800
            Q[1,14]=300
            Q[2,14]=100
            Q[3,14]=100
            Q[4,14]=500
            Q[5,14]=100
            Q[6,14]=100
            Q[7,14]=200
            Q[8,14]=400
            Q[9,14]=600
            Q[10,14]=2100
            Q[11,14]=1600
            Q[12,14]=700
            Q[13,14]=600
            Q[15,14]=1300
            Q[16,14]=700
            Q[17,14]=700
            Q[18,14]=100
            Q[19,14]=300
            Q[20,14]=500
            Q[21,14]=400
            Q[22,14]=1200
            Q[23,14]=1100
            Q[24,14]=400
            Q[1,15]=500
            Q[2,15]=100
            Q[3,15]=100
            Q[4,15]=500
            Q[5,15]=200
            Q[6,15]=200
            Q[7,15]=500
            Q[8,15]=600
            Q[9,15]=1000
            Q[10,15]=4000
            Q[11,15]=1400
            Q[12,15]=700
            Q[13,15]=700
            Q[14,15]=1300
            Q[16,15]=1200
            Q[17,15]=1500
            Q[18,15]=200
            Q[19,15]=800
            Q[20,15]=1100
            Q[21,15]=800
            Q[22,15]=2600
            Q[23,15]=1000
            Q[24,15]=400
            Q[1,16]=500
            Q[2,16]=400
            Q[3,16]=200
            Q[4,16]=800
            Q[5,16]=500
            Q[6,16]=900
            Q[7,16]=1400
            Q[8,16]=2200
            Q[9,16]=1400
            Q[10,16]=4400
            Q[11,16]=1400
            Q[12,16]=700
            Q[13,16]=600
            Q[14,16]=700
            Q[15,16]=1200
            Q[17,16]=2800
            Q[18,16]=500
            Q[19,16]=1300
            Q[20,16]=1600
            Q[21,16]=600
            Q[22,16]=1200
            Q[23,16]=500
            Q[24,16]=300
            Q[1,17]=400
            Q[2,17]=200
            Q[3,17]=100
            Q[4,17]=500
            Q[5,17]=200
            Q[6,17]=500
            Q[7,17]=1000
            Q[8,17]=1400
            Q[9,17]=900
            Q[10,17]=3900
            Q[11,17]=1000
            Q[12,17]=600
            Q[13,17]=500
            Q[14,17]=700
            Q[15,17]=1500
            Q[16,17]=2800
            Q[18,17]=600
            Q[19,17]=1700
            Q[20,17]=1700
            Q[21,17]=600
            Q[22,17]=1700
            Q[23,17]=600
            Q[24,17]=300
            Q[1,18]=100
            Q[4,18]=100
            Q[6,18]=100
            Q[7,18]=200
            Q[8,18]=300
            Q[9,18]=200
            Q[10,18]=700
            Q[11,18]=200
            Q[12,18]=200
            Q[13,18]=100
            Q[14,18]=100
            Q[15,18]=200
            Q[16,18]=500
            Q[17,18]=600
            Q[19,18]=300
            Q[20,18]=400
            Q[21,18]=100
            Q[22,18]=300
            Q[23,18]=100
            Q[1,19]=300
            Q[2,19]=100
            Q[4,19]=200
            Q[5,19]=100
            Q[6,19]=200
            Q[7,19]=400
            Q[8,19]=700
            Q[9,19]=400
            Q[10,19]=1800
            Q[11,19]=400
            Q[12,19]=300
            Q[13,19]=300
            Q[14,19]=300
            Q[15,19]=800
            Q[16,19]=1300
            Q[17,19]=1700
            Q[18,19]=300
            Q[20,19]=1200
            Q[21,19]=400
            Q[22,19]=1200
            Q[23,19]=300
            Q[24,19]=100
            Q[1,20]=300
            Q[2,20]=100
            Q[4,20]=300
            Q[5,20]=100
            Q[6,20]=300
            Q[7,20]=500
            Q[8,20]=900
            Q[9,20]=600
            Q[10,20]=2500
            Q[11,20]=600
            Q[12,20]=500
            Q[13,20]=600
            Q[14,20]=500
            Q[15,20]=1100
            Q[16,20]=1600
            Q[17,20]=1700
            Q[18,20]=400
            Q[19,20]=1200
            Q[21,20]=1200
            Q[22,20]=2400
            Q[23,20]=700
            Q[24,20]=400
            Q[1,21]=100
            Q[4,21]=200
            Q[5,21]=100
            Q[6,21]=100
            Q[7,21]=200
            Q[8,21]=400
            Q[9,21]=300
            Q[10,21]=1200
            Q[11,21]=400
            Q[12,21]=300
            Q[13,21]=600
            Q[14,21]=400
            Q[15,21]=800
            Q[16,21]=600
            Q[17,21]=600
            Q[18,21]=100
            Q[19,21]=400
            Q[20,21]=1200
            Q[22,21]=1800
            Q[23,21]=700
            Q[24,21]=500
            Q[1,22]=400
            Q[2,22]=100
            Q[3,22]=100
            Q[4,22]=400
            Q[5,22]=200
            Q[6,22]=200
            Q[7,22]=500
            Q[8,22]=500
            Q[9,22]=700
            Q[10,22]=2600
            Q[11,22]=1100
            Q[12,22]=700
            Q[13,22]=1300
            Q[14,22]=1200
            Q[15,22]=2600
            Q[16,22]=1200
            Q[17,22]=1700
            Q[18,22]=300
            Q[19,22]=1200
            Q[20,22]=2400
            Q[21,22]=1800
            Q[23,22]=2100
            Q[24,22]=1100
            Q[1,23]=300
            Q[3,23]=100
            Q[4,23]=500
            Q[5,23]=100
            Q[6,23]=100
            Q[7,23]=200
            Q[8,23]=300
            Q[9,23]=500
            Q[10,23]=1800
            Q[11,23]=1300
            Q[12,23]=700
            Q[13,23]=800
            Q[14,23]=1100
            Q[15,23]=1000
            Q[16,23]=500
            Q[17,23]=600
            Q[18,23]=100
            Q[19,23]=300
            Q[20,23]=700
            Q[21,23]=700
            Q[22,23]=2100
            Q[24,23]=700
            Q[1,24]=100
            Q[4,24]=200
            Q[6,24]=100
            Q[7,24]=100
            Q[8,24]=200
            Q[9,24]=200
            Q[10,24]=800
            Q[11,24]=600
            Q[12,24]=500
            Q[13,24]=700
            Q[14,24]=400
            Q[15,24]=400
            Q[16,24]=300
            Q[17,24]=300
            Q[19,24]=100
            Q[20,24]=400
            Q[21,24]=500
            Q[22,24]=1100
            Q[23,24]=700            
        init_od()

        for r in R:
            for s in S:
                Q[r,s] = Q[r,s]/100

        # travel cost function: use BPR function: t = tff(c+b(v/cap)**alpha)
        alpha = {}
        cap = {}
        tff = {}
        b = {}
        c = {}
        l_n = {}
        factor = 0.24

        for (r,s) in A:
                tff[r,s] = 1 #200
                alpha[r,s] = 4
                b[r,s] = 0.15
                cap[r,s] = 1 #1000
                c[r,s] = 1
                l_n[r,s] =  1

        def init_cap():
            cap = {(1,2):25900.20064,   (1,3):23403.47319,  (2,1):25900.20064,  (2,6):4958.180928,  (3,1):23403.47319,  (3,4):17110.52372,  (3,12):23403.47319, (4,3):17110.52372,  (4,5):17782.7941,   (4,11):4908.82673,  (5,4):17782.7941,   (5,6):4947.995469,  (5,9):10000,    (6,2):4958.180928,  (6,5):4947.995469,  (6,8):4898.587646,  (7,8):7841.81131,   (7,18):23403.47319, (8,6):4898.587646,  (8,7):7841.81131,   (8,9):5050.193156,  (8,16):5045.822583, (9,5):10000,    (9,8):5050.193156,  (9,10):13915.78842, (10,9):13915.78842, (10,11):10000,  (10,15):13512.00155,    (10,16):4854.917717,    (10,17):4993.510694,    (11,4):4908.82673,  (11,10):10000,  (11,12):4908.82673, (11,14):4876.508287,    (12,3):23403.47319, (12,11):4908.82673, (12,13):25900.20064,    (13,12):25900.20064,    (13,24):5091.256152,    (14,11):4876.508287,    (14,15):5127.526119,    (14,23):4924.790605,    (15,10):13512.00155,    (15,14):5127.526119,    (15,19):14564.75315,    (15,22):9599.180565,    (16,8):5045.822583, (16,10):4854.917717,    (16,17):5229.910063,    (16,18):19679.89671,    (17,10):4993.510694,    (17,16):5229.910063,    (17,19):4823.950831,    (18,7):23403.47319, (18,16):19679.89671,    (18,20):23403.47319,    (19,15):14564.75315,    (19,17):4823.950831,    (19,20):5002.607563,    (20,18):23403.47319,    (20,19):5002.607563,    (20,21):5059.91234, (20,22):5075.697193,    (21,20):5059.91234, (21,22):5229.910063,    (21,24):4885.357564,    (22,15):9599.180565,    (22,20):5075.697193,    (22,21):5229.910063,    (22,23):5000,   (23,14):4924.790605,    (23,22):5000,   (23,24):5078.508436,    (24,13):5091.256152,    (24,21):4885.357564,    (24,23):5078.508436}
            for (r,s) in A:
                cap[r,s] = cap[r,s]/100
            return cap
        cap = init_cap()

        def init_tff():
            tff = {(1,2):6, (1,3):4,    (2,1):6,    (2,6):5,    (3,1):4,    (3,4):4,    (3,12):4,   (4,3):4,    (4,5):2,    (4,11):6,   (5,4):2,    (5,6):4,    (5,9):5,    (6,2):5,    (6,5):4,    (6,8):2,    (7,8):3,    (7,18):2,   (8,6):2,    (8,7):3,    (8,9):10,   (8,16):5,   (9,5):5,    (9,8):10,   (9,10):3,   (10,9):3,   (10,11):5,  (10,15):6,  (10,16):4,  (10,17):8,  (11,4):6,   (11,10):5,  (11,12):6,  (11,14):4,  (12,3):4,   (12,11):6,  (12,13):3,  (13,12):3,  (13,24):4,  (14,11):4,  (14,15):5,  (14,23):4,  (15,10):6,  (15,14):5,  (15,19):3,  (15,22):3,  (16,8):5,   (16,10):4,  (16,17):2,  (16,18):3,  (17,10):8,  (17,16):2,  (17,19):2,  (18,7):2,   (18,16):3,  (18,20):4,  (19,15):3,  (19,17):2,  (19,20):4,  (20,18):4,  (20,19):4,  (20,21):6,  (20,22):5,  (21,20):6,  (21,22):2,  (21,24):3,  (22,15):3,  (22,20):5,  (22,21):2,  (22,23):4,  (23,14):4,  (23,22):4,  (23,24):2,  (24,13):4,  (24,21):3,  (24,23):2}
            for (r,s) in A:
                tff[r,s] = tff[r,s]/60/24
            return tff

        tff = init_tff()
        return Network_transport(N, A, R, S, Q, alpha,  b, cap, tff, c, num_nodes)

    def scen_Sioux_Falls(ntw_t, seed):
        random.seed(seed) 
        Xi = list(range(1,6))
        prob = {} # probability of each sceanrio
        #link = [(12,13), (13,12)]
        #link = [(15,19), (15,22), (19,15), (22, 15), (18, 20), (20,18)]
        link = random.sample(ntw_t.A, 5) 
        #link = [(10,15), (10, 11)]

        link_tff ={}
        link_c ={}
        link_b ={}
        link_alpha ={}
        link_cap ={}
        random_value = {}
        
        print("Capacity Discount", "\t", "Probability")
        for xi in Xi:
            prob[xi] = 1/len(Xi)
            #random_value[xi] = random.uniform(0.5,1) 
            #random_value[1] = 1 
            #random_value[2] = 0.5 
            #print(random_value[xi], "\t", prob[xi])


        # actual
        for xi in Xi:
            for (i,j) in link:
                link_tff[i,j,xi] = ntw_t.tff[i,j]
                link_c[i,j,xi] = ntw_t.c[i,j] # 1, 2 link nodes, 1 scenario id
                link_b[i,j,xi] = ntw_t.b[i,j]
                link_alpha[i,j,xi] = ntw_t.alpha[i,j]
                #link_cap[i,j,xi] = ntw_t.cap[i,j]

                link_cap[i,j,xi] = ntw_t.cap[i,j]* random.uniform(0.5,1)

        return Scen(Xi, prob,link, link_tff, link_c, link_b, link_cap, link_alpha)


